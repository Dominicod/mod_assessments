require './lib/passenger'
require './lib/vehicle'
require './lib/park'

RSpec.describe Park do
    before(:all) do
        @vehicle_1 = Vehicle.new("2001", "Honda", "Civic")
        @vehicle_2 = Vehicle.new("2004", "Toyota", "Camry")

        @charlie = Passenger.new({"name" => "Charlie", "age" => 18})
        @jude = Passenger.new({"name" => "Jude", "age" => 20})
        @taylor = Passenger.new({"name" => "Taylor", "age" => 12})

        @vehicle_1.add_passenger(@charlie)
        @vehicle_1.add_passenger(@jude)
        @vehicle_1.add_passenger(@taylor)

        @dominic = Passenger.new({"name" => "Dominic", "age" => 23})
        @shawn = Passenger.new({"name" => "Shawn", "age" => 26})
        @ryan = Passenger.new({"name" => "Ryan", "age" => 28})

        @vehicle_2.add_passenger(@dominic)
        @vehicle_2.add_passenger(@shawn)
        @vehicle_2.add_passenger(@ryan)

        @park = Park.new("Turing", 20)
    end
    describe ".park_initialize" do
        context "park object is instance of class" do
            it 'exists' do
                expect(@park).to be_an_instance_of(Park)
            end
        end

        context "park object returns instance variables" do
            it "has a name" do
                expect(@park.name).to eq("Turing")
            end

            it "has a admission" do
                expect(@park.admission).to eq(20)
            end

            it "vehicle array is empty by default" do
                expect(@park.vehicles).to eq([])
            end
        end
    end

    describe ".enter" do
        context "shovels each vehicle into vehicles array" do
            it 'adds new vehicle' do
                @park.enter(@vehicle_1)

                expect(@park.vehicles).to eq([@vehicle_1])

                @park.enter(@vehicle_2)

                expect(@park.vehicles).to eq([@vehicle_1, @vehicle_2])
            end
        end
    end

    describe ".passengers" do
        context "can list all passengers that entered park" do
            it 'can list passengers' do
                expect(@park.passengers).to eq(["Charlie", "Jude", "Taylor", "Dominic", "Shawn", "Ryan"])
            end
        end
    end

    describe ".calculate_revenue" do
        context "can calculate the revenue generated by adults" do
            it 'can calculate' do
                expect(@park.calculate_revenue).to eq(100)
            end

            it 'can adapt given more passengers' do
                @abdul = Passenger.new({"name" => "Abdul", "age" => 21})
                @vehicle_1.add_passenger(@abdul)

                expect(@park.calculate_revenue).to eq(120)
            end
        end
    end

    describe ".revenue_by_vehicle" do
        context "can calculate the revenue generated by each vehicle" do
            xit 'returns hash per vehicle' do
                expect(@park.revenue_by_vehicle).to eq("test")
            end
        end
    end
end